// src/scripts/test-telegram-bot.ts
// Script para probar todas las funcionalidades del bot

// IMPORTANTE: Cargar variables de entorno antes de cualquier importaci√≥n
import * as dotenv from 'dotenv';
import path from 'path';

// Cargar .env.local desde la ra√≠z del proyecto
dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });

// Ahora importar el resto de m√≥dulos
import {
  TelegramNotifications,
  VehicleBot,
} from "@/lib/telegram-notifications";

// Define tipos espec√≠ficos en lugar de usar 'any'
type TestType = "connection" | "webhook" | "commands" | "notification";

class BotTester {
  // Prueba 1: Verificar conexi√≥n del bot
  static async testBotConnection() {
    console.log("ü§ñ Probando conexi√≥n del bot...");
    try {
      const bot = TelegramNotifications.getInstance();
      const botInstance = bot.getBot();
      const me = await botInstance.telegram.getMe();
      console.log("‚úÖ Bot conectado:", me.username);
      console.log("üìã ID del bot:", me.id);
      return true;
    } catch (error) {
      console.error("‚ùå Error de conexi√≥n:", error);
      return false;
    }
  }

  // Prueba 2: Enviar notificaci√≥n de prueba
  static async testNotification(chatId: string) {
    console.log("üì¢ Probando notificaci√≥n...");
    try {
      // Usar la clase directamente en lugar del hook
      const vehicleData: VehicleBot = {
        _id: "test-" + Date.now(),
        brand: "Toyota",
        model: "Corolla",
        year: 2020,
        price: 15000,
        location: "San Jos√©, Costa Rica",
        images: [
          "https://via.placeholder.com/400x300/0066cc/ffffff?text=Toyota+Corolla",
        ],
        features: ["Aire acondicionado", "Transmisi√≥n autom√°tica", "GPS"],
        ownerTelegramId: chatId,
      };

      await TelegramNotifications.notifyNewVehicle(vehicleData);
      console.log("‚úÖ Notificaci√≥n enviada correctamente");
      return true;
    } catch (error) {
      console.error("‚ùå Error enviando notificaci√≥n:", error);
      return false;
    }
  }

  // Prueba 3: Probar webhook
  static async testWebhook() {
    console.log("üåê Probando webhook...");
    try {
      const baseUrl =
        process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000";
      const response = await fetch(`${baseUrl}/api/telegram/webhook`);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();

      if (data.status === "Telegram bot webhook is running") {
        console.log("‚úÖ Webhook funcionando correctamente");
        console.log("üìä Bot:", data.bot);
        console.log("‚è∞ Timestamp:", data.timestamp);
        return true;
      } else {
        console.error("‚ùå Webhook no responde correctamente");
        return false;
      }
    } catch (error) {
      console.error("‚ùå Error probando webhook:", error);
      return false;
    }
  }

  // Prueba 4: Verificar comandos
  static async testCommands() {
    console.log("‚öôÔ∏è Verificando comandos registrados...");
    try {
      const bot = TelegramNotifications.getInstance();
      const botInstance = bot.getBot();

      const commands = await botInstance.telegram.getMyCommands();
      console.log("üìã Comandos encontrados:", commands.length);

      if (commands.length > 0) {
        console.log("‚úÖ Comandos configurados:");
        commands.forEach((cmd) => {
          console.log(`   /${cmd.command} - ${cmd.description}`);
        });
        return true;
      } else {
        console.log("‚ö†Ô∏è No hay comandos registrados");
        console.log(
          "üí° Esto es normal si es la primera vez que ejecutas el bot"
        );
        return false;
      }
    } catch (error) {
      console.error("‚ùå Error verificando comandos:", error);
      return false;
    }
  }

  // Prueba 5: Verificar variables de entorno
  static testEnvironmentVariables() {
    console.log("üîê Verificando variables de entorno...");

    const requiredVars = [
      "MONGODB_URI", // Agregado para verificar MongoDB
      "TELEGRAM_BOT_TOKEN",
      "TELEGRAM_BOT_USERNAME", 
      "TELEGRAM_ADMIN_CHAT_IDS",
      "NEXT_PUBLIC_BASE_URL",
    ];

    const missing: string[] = [];
    const found: string[] = [];

    requiredVars.forEach((varName) => {
      if (process.env[varName]) {
        found.push(varName);
      } else {
        missing.push(varName);
      }
    });

    console.log("‚úÖ Variables encontradas:", found.length);
    found.forEach((v) => console.log(`   ${v}: ‚úì`));

    if (missing.length > 0) {
      console.log("‚ùå Variables faltantes:", missing.length);
      missing.forEach((v) => console.log(`   ${v}: ‚úó`));
      return false;
    }

    return true;
  }

  // Ejecutar todas las pruebas
  static async runAllTests(testChatId?: string) {
    console.log("üß™ INICIANDO PRUEBAS DEL BOT DE TELEGRAM");
    console.log("=".repeat(50));

    const results = {
      environment: this.testEnvironmentVariables(),
      connection: false,
      webhook: false,
      commands: false,
      notification: false,
    };

    console.log("");

    // Solo continuar si las variables de entorno est√°n bien
    if (results.environment) {
      results.connection = await this.testBotConnection();
      results.webhook = await this.testWebhook();

      if (results.connection) {
        results.commands = await this.testCommands();

        // Solo probar notificaci√≥n si tenemos chatId y la conexi√≥n funciona
        if (testChatId) {
          console.log(`\nüì± Probando notificaci√≥n a chat ID: ${testChatId}`);
          results.notification = await this.testNotification(testChatId);
        }
      }
    }

    console.log("\nüìä RESULTADOS FINALES:");
    console.log("=".repeat(30));
    console.log(
      `üîê Variables de entorno: ${results.environment ? "‚úÖ OK" : "‚ùå FALTAN"}`
    );
    console.log(
      `ü§ñ Conexi√≥n del bot: ${results.connection ? "‚úÖ OK" : "‚ùå FALLO"}`
    );
    console.log(`üåê Webhook: ${results.webhook ? "‚úÖ OK" : "‚ùå FALLO"}`);
    console.log(
      `‚öôÔ∏è Comandos: ${results.commands ? "‚úÖ OK" : "‚ö†Ô∏è SIN COMANDOS"}`
    );
    console.log(
      `üì¢ Notificaciones: ${results.notification ? "‚úÖ OK" : testChatId ? "‚ùå FALLO" : "‚ö†Ô∏è NO PROBADO"}`
    );

    const totalTests = testChatId ? 5 : 4;
    const passedTests = Object.values(results).filter(Boolean).length;

    console.log(
      `\nüéØ RESULTADO FINAL: ${passedTests}/${totalTests} pruebas exitosas`
    );

    if (passedTests === totalTests) {
      console.log("üéâ ¬°TODO FUNCIONANDO PERFECTAMENTE!");
      console.log("üöÄ Tu bot est√° listo para usar");
    } else if (passedTests >= totalTests - 1) {
      console.log("‚úÖ Bot funcionando bien con problemas menores");
    } else {
      console.log("‚ö†Ô∏è Hay algunos problemas que necesitan atenci√≥n");

      // Sugerencias espec√≠ficas
      if (!results.environment) {
        console.log("üí° Revisa tu archivo .env.local");
      }
      if (!results.connection) {
        console.log("üí° Verifica tu TELEGRAM_BOT_TOKEN");
      }
      if (!results.webhook) {
        console.log("üí° Aseg√∫rate de que tu servidor est√© corriendo");
      }
    }

    return results;
  }

  // M√©todo para probar solo una funcionalidad espec√≠fica
  static async testSingle(
    testType: TestType,
    chatId?: string
  ) {
    console.log(`üîç Probando: ${testType.toUpperCase()}`);

    switch (testType) {
      case "connection":
        return await this.testBotConnection();
      case "webhook":
        return await this.testWebhook();
      case "commands":
        return await this.testCommands();
      case "notification":
        if (!chatId) {
          console.error("‚ùå Se requiere chatId para probar notificaciones");
          return false;
        }
        return await this.testNotification(chatId);
      default:
        console.error("‚ùå Tipo de prueba no v√°lido");
        return false;
    }
  }
}

// Funci√≥n principal para exportar
export async function testTelegramBot(chatId?: string) {
  return await BotTester.runAllTests(chatId);
}

// Funci√≥n para probar una sola funcionalidad
export async function testSingle(
  testType: TestType,
  chatId?: string
) {
  return await BotTester.testSingle(testType, chatId);
}

// Si se ejecuta directamente desde la l√≠nea de comandos
if (require.main === module) {
  const chatId = process.argv[2]; // Opcional: node test-telegram-bot.js CHAT_ID
  const testType = process.argv[3] as TestType; // Opcional: node test-telegram-bot.js CHAT_ID connection

  if (testType) {
    testSingle(testType, chatId);
  } else {
    testTelegramBot(chatId);
  }
}

export default BotTester;